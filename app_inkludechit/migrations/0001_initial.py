# Generated by Django 5.2 on 2025-06-04 11:06

import django.core.validators
import django.db.models.deletion
import shortuuid.django_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BankListModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(blank=True, choices=[('State Bank of India', 'State Bank of India'), ('Bank of Baroda', 'Bank of Baroda'), ('Bank of India', 'Bank of India'), ('Bank of Maharashtra', 'Bank of Maharashtra'), ('Canara Bank', 'Canara Bank'), ('Central Bank of India', 'Central Bank of India'), ('Indian Bank', 'Indian Bank'), ('Indian Overseas Bank', 'Indian Overseas Bank'), ('Punjab National Bank', 'Punjab National Bank'), ('Punjab & Sind Bank', 'Punjab & Sind Bank'), ('UCO Bank', 'UCO Bank'), ('Union Bank of India', 'Union Bank of India'), ('HDFC Bank', 'HDFC Bank'), ('ICICI Bank', 'ICICI Bank'), ('Axis Bank', 'Axis Bank'), ('Kotak Mahindra Bank', 'Kotak Mahindra Bank'), ('IndusInd Bank', 'IndusInd Bank'), ('IDFC FIRST Bank', 'IDFC FIRST Bank'), ('Bandhan Bank', 'Bandhan Bank'), ('CSB Bank', 'CSB Bank'), ('City Union Bank', 'City Union Bank'), ('DCB Bank', 'DCB Bank'), ('Dhanlaxmi Bank', 'Dhanlaxmi Bank'), ('Federal Bank', 'Federal Bank'), ('Jammu & Kashmir Bank', 'Jammu & Kashmir Bank'), ('Karnataka Bank', 'Karnataka Bank'), ('Karur Vysya Bank', 'Karur Vysya Bank'), ('Nainital Bank', 'Nainital Bank'), ('South Indian Bank', 'South Indian Bank'), ('Tamilnad Mercantile Bank', 'Tamilnad Mercantile Bank'), ('Yes Bank', 'Yes Bank'), ('RBL Bank', 'RBL Bank'), ('Lakshmi Vilas Bank', 'Lakshmi Vilas Bank'), ('Citibank', 'Citibank'), ('HSBC', 'HSBC'), ('Standard Chartered', 'Standard Chartered'), ('Deutsche Bank', 'Deutsche Bank'), ('Barclays', 'Barclays'), ('BNP Paribas', 'BNP Paribas'), ('Bank of America', 'Bank of America'), ('DBS Bank', 'DBS Bank'), ('Societe Generale', 'Societe Generale'), ('Airtel Payments Bank', 'Airtel Payments Bank'), ('Fino Payments Bank', 'Fino Payments Bank'), ('India Post Payments Bank', 'India Post Payments Bank'), ('NSDL Payments Bank', 'NSDL Payments Bank'), ('Paytm Payments Bank', 'Paytm Payments Bank'), ('AU Small Finance Bank', 'AU Small Finance Bank'), ('Equitas Small Finance Bank', 'Equitas Small Finance Bank'), ('Fincare Small Finance Bank', 'Fincare Small Finance Bank'), ('ESAF Small Finance Bank', 'ESAF Small Finance Bank'), ('Ujjivan Small Finance Bank', 'Ujjivan Small Finance Bank'), ('Utkarsh Small Finance Bank', 'Utkarsh Small Finance Bank'), ('Suryoday Small Finance Bank', 'Suryoday Small Finance Bank'), ('Jana Small Finance Bank', 'Jana Small Finance Bank'), ('North East Small Finance Bank', 'North East Small Finance Bank'), ('Shivalik Small Finance Bank', 'Shivalik Small Finance Bank'), ('Capital Small Finance Bank', 'Capital Small Finance Bank'), ('Coastal Local Area Bank Ltd', 'Coastal Local Area Bank Ltd'), ('Krishna Bhima Samruddhi LAB Ltd', 'Krishna Bhima Samruddhi LAB Ltd')], default='State Bank of India', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NomineeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nominee_name', models.CharField(blank=True, max_length=255, null=True)),
                ('nominee_relation', models.CharField(blank=True, max_length=255, null=True)),
                ('nominee_address', models.TextField(blank=True, null=True)),
                ('nominee_contact', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid 10-digit phone number.', regex='^\\d{10}$')])),
            ],
        ),
        migrations.CreateModel(
            name='OtpRecordModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_no', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter a 10 digit number', regex='^\\d{10}')])),
                ('otp', models.CharField(blank=True, max_length=4, null=True)),
                ('create_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_mode', models.CharField(blank=True, choices=[('online', 'online'), ('direct', 'direct')], default='online', max_length=255, null=True)),
                ('collection_area', models.CharField(blank=True, max_length=255, null=True)),
                ('collection_point', models.PositiveIntegerField(blank=True, null=True)),
                ('collection_start_date', models.DateField(blank=True, null=True)),
                ('customer_committed_day', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('forman_commision', models.CharField(blank=True, max_length=50, null=True)),
                ('upi_number', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kuri_type', models.CharField(blank=True, choices=[('auction', 'auction'), ('draw', 'draw'), ('offer', 'offer'), ('multi division', 'multi division')], default='auction', max_length=50, null=True)),
                ('product_code', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(111), django.core.validators.MaxValueValidator(999)])),
                ('document_type', models.CharField(blank=True, choices=[('collateral', 'collateral'), ('non collateral', 'non collateral')], default='collateral', max_length=100, null=True)),
                ('collection_mode', models.CharField(blank=True, choices=[('daily', 'daily'), ('weekly', 'weekly'), ('monthly', 'monthly')], default='daily', max_length=50, null=True)),
                ('joining_date', models.DateField(blank=True, null=True)),
                ('first_emi_completion_date', models.DateField(blank=True, null=True)),
                ('chit_duration', models.CharField(blank=True, max_length=50, null=True)),
                ('last_emi_date', models.DateField(blank=True, null=True)),
                ('auction_eligibility', models.CharField(blank=True, max_length=255, null=True)),
                ('auction_date', models.PositiveIntegerField(blank=True, null=True)),
                ('divident_date', models.PositiveIntegerField(blank=True, null=True)),
                ('draw_date', models.PositiveIntegerField(blank=True, null=True)),
                ('dispatching_committed_date', models.DateField(blank=True, null=True)),
                ('multi_division_auction_eligibility', models.DateField(blank=True, null=True)),
                ('multi_division_auction_date', models.CharField(blank=True, max_length=100, null=True)),
                ('multi_division_divident_date', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShareMyInterestModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('custoemr_comment', models.TextField(blank=True, default='', null=True)),
                ('customer_country_code', models.CharField(blank=True, default='+91', max_length=50, null=True)),
                ('customer_phone', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid 10 digit phone number', regex='^\\d{10}$')])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('user_type', models.CharField(blank=True, choices=[('admin', 'admin'), ('super admin', 'super admin'), ('sales agent', 'sales agent'), ('collection agent', 'collection agent'), ('sales and collection agent', 'sales and collection agent'), ('customer', 'customer')], default='customer', max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('mobile', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Please Provide a 10 digit number', regex='^\\d{10}')])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentProfileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agent_code', shortuuid.django_fields.ShortUUIDField(alphabet='0123456789', blank=True, length=4, max_length=6, null=True, prefix='', unique=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile_no', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter a 10 digit valid number', regex='\\d{10}$')])),
                ('whatsapp_no', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter a 10 digit valid number', regex='\\d{10}$')])),
                ('email', models.EmailField(max_length=254)),
                ('amount', models.FloatField(default=0.0)),
                ('reciept_no', models.CharField(max_length=12, unique=True)),
                ('customer_otp', models.CharField(blank=True, max_length=4, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_salepunch_created', models.BooleanField(blank=True, default=False, null=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.agentprofilemodel')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SalePunchModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.CharField(blank=True, max_length=12, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='UID should be 12 digit', regex='^\\d{12}')])),
                ('kyc', models.CharField(blank=True, max_length=12, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='KYC number should be 12 digit', regex='^\\d{12}')])),
                ('agent_code', models.CharField(blank=True, max_length=4, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('family_name', models.CharField(blank=True, max_length=255, null=True)),
                ('place', models.CharField(blank=True, max_length=255, null=True)),
                ('pancard_no', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Pancard Number', regex='^[A-Z]{5}[0-9]{4}[A-Z]{1}$')])),
                ('adhar_no', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator(message='Adhar card number must be 12 digits', regex='^\\d{12}$')])),
                ('current_address', models.TextField(blank=True, null=True)),
                ('permenent_address', models.TextField(blank=True, null=True)),
                ('postal_address', models.TextField(blank=True, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('married', 'married'), ('single', 'single'), ('divorced', 'divorced')], default='single', max_length=255, null=True)),
                ('company_address', models.TextField(blank=True, null=True)),
                ('company_pincode', models.CharField(blank=True, max_length=50, null=True)),
                ('designation', models.CharField(blank=True, max_length=50, null=True)),
                ('period_of_work', models.PositiveIntegerField(blank=True, null=True)),
                ('working_time', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('salary_date', models.DateField(blank=True, null=True)),
                ('company_salary_mode', models.CharField(blank=True, choices=[('through bank account', 'through bank account'), ('cash in hands', 'cash in hands')], default='through bank account', max_length=255, null=True)),
                ('company_contact_no', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid 10-digit phone number.', regex='^\\d{10}$')])),
                ('company_reference_mobile_no', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid 10-digit phone number.', regex='^\\d{10}$')])),
                ('company_partner_detail', models.CharField(blank=True, max_length=255, null=True)),
                ('signature_field', models.FileField(blank=True, null=True, upload_to='signature/')),
                ('video_field', models.FileField(blank=True, null=True, upload_to='video/')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agent', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('customer_prof', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.customerprofilemodel')),
                ('nominee_model_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.nomineemodel')),
                ('payment_model_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.paymentmodel')),
                ('product_model_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.productmodel')),
            ],
        ),
        migrations.CreateModel(
            name='LiabilitiesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(default=0.0)),
                ('emi_amount', models.FloatField(default=0.0)),
                ('salepunch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app_inkludechit.salepunchmodel')),
            ],
        ),
    ]
